name: CI/CD Pipeline - Performance Monitor

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check formatting
      run: cargo fmt -- --check
      
    - name: Run clippy
      run: cargo clippy -- -D warnings
      
    - name: Run tests
      run: cargo test --verbose
      
    - name: Build release
      run: cargo build --release
      
    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: performance-monitor-binary
        path: target/release/performance-monitor

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build and Push
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        password: ${{ secrets.PROD_PASSWORD }}
        port: ${{ secrets.PROD_PORT || 22 }}
        script: |
          # Set variables
          REPO=${{ github.repository }}
          REGISTRY=${{ env.REGISTRY }}
          IMAGE_TAG=latest
          
          # Create deployment directory if not exists
          mkdir -p ~/performance-monitor
          cd ~/performance-monitor
          
          # Pull latest docker-compose.yml
          curl -o docker-compose.yml https://raw.githubusercontent.com/$REPO/main/docker-compose.yml
          
          # Update image tag in docker-compose.yml
          sed -i "s|image: performance-monitor:latest|image: $REGISTRY/$REPO:$IMAGE_TAG|g" docker-compose.yml
          
          # Pull latest images
          docker-compose pull
          
          # Restart services
          docker-compose down
          docker-compose up -d
          
          # Wait for services to be healthy
          sleep 10
          
          # Check service status
          docker-compose ps
          
          # Show logs
          docker-compose logs --tail=20 performance-monitor
          
          echo "Deployment completed successfully!"

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        password: ${{ secrets.STAGING_PASSWORD }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          # Set variables
          REPO=${{ github.repository }}
          REGISTRY=${{ env.REGISTRY }}
          IMAGE_TAG=develop
          
          # Create deployment directory if not exists
          mkdir -p ~/performance-monitor-staging
          cd ~/performance-monitor-staging
          
          # Pull latest docker-compose.yml
          curl -o docker-compose.yml https://raw.githubusercontent.com/$REPO/main/docker-compose.yml
          
          # Update image tag and container names for staging
          sed -i "s|image: performance-monitor:latest|image: $REGISTRY/$REPO:$IMAGE_TAG|g" docker-compose.yml
          sed -i "s|container_name: performance-monitor|container_name: performance-monitor-staging|g" docker-compose.yml
          sed -i "s|container_name: monitor-log-rotate|container_name: monitor-log-rotate-staging|g" docker-compose.yml
          sed -i "s|./logs|./logs-staging|g" docker-compose.yml
          
          # Pull latest images
          docker-compose pull
          
          # Restart services
          docker-compose down
          docker-compose up -d
          
          # Wait for services to be healthy
          sleep 10
          
          # Check service status
          docker-compose ps
          
          echo "Staging deployment completed successfully!"

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, deploy-staging]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success' || needs.deploy-staging.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add your notification logic here (Slack, Discord, etc.)
        
    - name: Notify failure
      if: needs.deploy.result == 'failure' || needs.deploy-staging.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add your notification logic here (Slack, Discord, etc.)